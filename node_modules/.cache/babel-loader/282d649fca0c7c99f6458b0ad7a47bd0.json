{"ast":null,"code":"var _jsxFileName = \"/Users/rulla/Desktop/Bootcamp/Employee-Directory/src/components/EmployeeMain/index.js\";\nimport React, { Component } from \"react\";\nimport EmployeeTable from \"../EmployeeTable/EmployeeTable\";\nimport SearchInput from \"../SearchInput/SearchInput\";\nimport API from \"../utils/API\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass EmployeeMain extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: \"\",\n      employees: [],\n      filteredEmployees: [],\n      sortDir: this.sortDirectory\n    };\n\n    this.handleFormSubmit = event => {\n      event.preventDefault();\n    };\n\n    this.handleInputChange = event => {\n      const value = event.target.value;\n      this.setState({\n        search: value\n      });\n      this.filterEmployeesData(value.toLowerCase().trim());\n    };\n\n    this.filterEmployeesData = data => {\n      if (data) {\n        this.setState({\n          filteredEmployees: this.state.employees.filter(employee => {\n            return employee.name.first.toLowerCase().concat(\" \", employee.name.last.toLowerCase()).includes(data) || employee.phone.includes(data) || employee.phone.replace(/[^\\w\\s]/gi, \"\").includes(data) || employee.email.includes(data) || this.formatDate(employee.dob.date).includes(data);\n          })\n        });\n      } else {\n        this.setState({\n          filteredEmployees: this.state.employees\n        });\n      }\n    };\n\n    this.sortBy = (key, primary = 0, secondary = 0) => {\n      let sortedStaff = this.state.filteredEmployees;\n\n      if (this.state.sortDir[key]) {\n        this.setState({\n          filteredEmployees: sortedStaff.reverse(),\n          sortDir: { ...this.sortDirectory,\n            [key]: this.state.sortDir[key] === \"asc\" ? \"desc\" : \"asc\"\n          }\n        });\n      } else {\n        sortedStaff = this.state.filteredEmployees.sort((a, b) => {\n          a = a[key];\n          b = b[key]; // if secondary and primary are ===,\n          // and with sorting by last name and they are the same, then sort by first name instead\n\n          if (primary) {\n            if (secondary && a[primary] === b[primary]) {\n              return a[secondary].localeCompare(b[secondary]);\n            }\n\n            return a[primary].localeCompare(b[primary]);\n          } else {\n            return a.localeCompare(b);\n          }\n        });\n        this.setState({\n          filteredEmployees: sortedStaff,\n          sortDir: { ...this.sortDirectory,\n            [key]: \"asc\"\n          }\n        });\n      }\n    };\n\n    this.formatDate = date => {\n      date = new Date(date);\n      let dob = [];\n      dob.push((\"0\" + (date.getMonth() + 1)).slice(-2));\n      dob.push((\"0\" + date.getDate()).slice(-2));\n      dob.push(date.getFullYear()); // Join the formatted date with dash delimeter\n\n      return dob.join(\"-\");\n    };\n  }\n\n  // SORTING EACH COLUMN \n  get sortDirectory() {\n    return {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      dob: \"\"\n    };\n  } // When this component mounts, call the api 'https://randomuser.me/api/?results=150'\n\n\n  componentDidMount() {\n    API.searchEmployees().then(res => this.setState({\n      employees: res.data.results,\n      filteredEmployees: res.data.results\n    })).catch(err => console.log(err));\n  } // When the form is submitted, search the  API for the value of `this.state.search`\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(SearchInput, {\n        value: this.state.search,\n        handleInputChange: this.handleInputChange,\n        handleFormSubmit: this.handleFormSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mt\",\n        children: /*#__PURE__*/_jsxDEV(EmployeeTable, {\n          state: this.state,\n          sortBy: this.sortBy,\n          filteredEmployees: this.filterEmployeesData,\n          formatDate: this.formatDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default EmployeeMain;","map":{"version":3,"sources":["/Users/rulla/Desktop/Bootcamp/Employee-Directory/src/components/EmployeeMain/index.js"],"names":["React","Component","EmployeeTable","SearchInput","API","EmployeeMain","state","search","employees","filteredEmployees","sortDir","sortDirectory","handleFormSubmit","event","preventDefault","handleInputChange","value","target","setState","filterEmployeesData","toLowerCase","trim","data","filter","employee","name","first","concat","last","includes","phone","replace","email","formatDate","dob","date","sortBy","key","primary","secondary","sortedStaff","reverse","sort","a","b","localeCompare","Date","push","getMonth","slice","getDate","getFullYear","join","componentDidMount","searchEmployees","then","res","results","catch","err","console","log","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport EmployeeTable from \"../EmployeeTable/EmployeeTable\";\nimport SearchInput from \"../SearchInput/SearchInput\";\nimport API from \"../utils/API\";\n\nclass EmployeeMain extends Component {\n  state = {\n    search: \"\",\n    employees: [],\n    filteredEmployees: [],\n    sortDir: this.sortDirectory,\n  };\n\n  // SORTING EACH COLUMN \n  get sortDirectory() {\n    return {\n      name: \"\",\n      email:\"\",\n      phone: \"\",\n      dob: \"\",\n    };\n  }\n\n  // When this component mounts, call the api 'https://randomuser.me/api/?results=150'\n  componentDidMount() {\n    API.searchEmployees()\n      .then((res) =>\n        this.setState({\n          employees: res.data.results,\n          filteredEmployees: res.data.results,\n        })\n      )\n      .catch((err) => console.log(err));\n  }\n\n  // When the form is submitted, search the  API for the value of `this.state.search`\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n  };\n\n  // UPDATE THE SEARCH VALUE IN STATE TO FILTER BY EMPLOYEE NAME\n  handleInputChange = (event) => {\n    const value = event.target.value;\n    this.setState({ search: value });\n    this.filterEmployeesData(value.toLowerCase().trim());\n  };\n\n  // A FX THAT RETURNS A NEW ARRAY WITH FILTER METHOD AND UPDATES STATE\n  filterEmployeesData = (data) => {\n    if (data) {\n      this.setState({\n        filteredEmployees: this.state.employees.filter((employee) => {\n          return (\n            employee.name.first\n              .toLowerCase()\n              .concat(\" \", employee.name.last.toLowerCase())\n              .includes(data) ||\n            employee.phone.includes(data) ||\n            employee.phone.replace(/[^\\w\\s]/gi, \"\").includes(data) ||\n            employee.email.includes(data) ||\n            this.formatDate(employee.dob.date).includes(data)\n          );\n        }),\n      });\n    } else {\n      this.setState({ filteredEmployees: this.state.employees });\n    }\n  };\n\n  // SORTING ENGINE--using a key of specific object\n  sortBy = (key, primary = 0, secondary = 0) => {\n    let sortedStaff = this.state.filteredEmployees;\n    if (this.state.sortDir[key]) {\n      this.setState({\n        filteredEmployees: sortedStaff.reverse(),\n        sortDir: {\n          ...this.sortDirectory,\n          [key]: this.state.sortDir[key] === \"asc\" ? \"desc\" : \"asc\",\n        },\n      });\n    } else {\n      sortedStaff = this.state.filteredEmployees.sort((a, b) => {\n        a = a[key];\n        b = b[key];\n\n        // if secondary and primary are ===,\n        // and with sorting by last name and they are the same, then sort by first name instead\n\n        if (primary) {\n          if (secondary && a[primary] === b[primary]) {\n            return a[secondary].localeCompare(b[secondary]);\n          }\n          return a[primary].localeCompare(b[primary]);\n        } else {\n          return a.localeCompare(b);\n        }\n      });\n\n      this.setState({\n        filteredEmployees: sortedStaff,\n        sortDir: { ...this.sortDirectory, [key]: \"asc\" },\n      });\n    }\n  };\n\n  // FORMATS DATE AND CALLED AS PROPS IN EmployeeTable\n  formatDate = (date) => {\n    date = new Date(date);\n    let dob = [];\n    dob.push((\"0\" + (date.getMonth() + 1)).slice(-2));\n    dob.push((\"0\" + date.getDate()).slice(-2));\n    dob.push(date.getFullYear());\n\n    // Join the formatted date with dash delimeter\n    return dob.join(\"-\");\n  };\n\n  render() {\n    return (\n      <>\n        <SearchInput\n          value={this.state.search}\n          handleInputChange={this.handleInputChange}\n          handleFormSubmit={this.handleFormSubmit}\n        />\n        <div className=\"container mt\">\n          <EmployeeTable\n            state={this.state}\n            sortBy={this.sortBy}\n            filteredEmployees={this.filterEmployeesData}\n            formatDate={this.formatDate}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default EmployeeMain;"]},"metadata":{},"sourceType":"module"}